from flask import Flask, render_template, request, redirect, url_for, jsonify
from flask_bootstrap import Bootstrap
import urllib.parse
#from playlistgenerator import generate_playlist
import unittest

app = Flask(__name__, template_folder='templates', static_url_path='')
#app.spotify_service = SpotifyService()

app.secret_key = 'f642db8a7a1b4766b77a21cfe5d5a226'

CLIENT_ID = 'a37a91bdf69e489290e5c30d66f95e69'

CLIENT_SECRET = 'f642db8a7a1b4766b77a21cfe5d5a226'

REDIRECT_URI = 'https://localhost:5000/callback'

AUTH_URL = 'https://accounts.spotify.com/authorize'
TOKEN_URL = 'https://accounts.spotify.com/api/token'
API_BASE_URL = 'https://api.spotify.com/v1/'

# Initialize the Flask-Bootstrap extension with app
bootstrap = Bootstrap(app)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login')
def login():
    scope = 'user-read-private user-read-email playlist-modify-public'
    
    params = {
        'client_id': CLIENT_ID,
        'response_type': 'code',
        'scope': scope,
        'redirect_uri': REDIRECT_URI,
        'show_dialog': True # Force user to login every time for testing (DELETE LATER)
    }
    
    auth_url = f"{AUTH_URL}?{urllib.parse.urlencode(params)}"
    
    return redirect(auth_url)

@app.route('/callback')
def callback():
    if 'error' in request.args:
        return jsonify({"error": request.args['error']})
    
    if 'code' in request.args:
        req_body = {
            'code': request.args['code'],
            'grant_type': 'authorization_code',
            'redirect_uri': REDIRECT_URI,
            'client_id': CLIENT_ID,
            'client_secret': CLIENT_SECRET
        }
        
        response = requests.post(TOKEN_URL, data=req_body)
        token_info = response.json()
        
        session['access_token'] = token_info['access_token']
        session['refresh_token'] = token_info['refresh_token']
        session['expires_at'] = datetime.now().timestamp() + token_info['expires_in']
        
        return redirect('/playlists')

# Route to find all the user's current playlists
@app.route('/playlists')
def get_playlists():
    if 'access_token' not in session:
        return redirect('/login')
    
    if datetime.now().timestamp() > session['expires_at']:
        return redirect('/refresh_token')
    
    headers = {
        "Authorization": f"Bearer {session['access_token']}"
    }
    
    response = requests.get(API_BASE_URL + 'me/playlists', headers=headers)
    playlists = response.json()
    
    return jsonify(playlists)


@app.route('/refresh-token')
def refresh_token():
    if 'refresh_token' not in session:
        return redirect('/login')
        
    if datetime.now().timestamp() > session['expires_at']:
        req_body = {
            'grant_type': 'refresh_token',
            'refresh_token': session['refresh_token'],
            'client_id': CLIENT_ID,
            'client_secret': CLIENT_SECRET
        }
            
        response = requests.post(TOKEN_URL, data=req_body)
        new_token_info = response.json()
            
        session['access_token'] = new_token_info['access_token']
        session['expires_at'] = datetime.now().timestamp() + new_token_info['expires_in']
            
        return redirect('/playlists')



# @app.route('/generate_playlist', methods=['POST'])
# def generate_playlist():
#     access_token = request.json['access_token']
#     user_id = request.json['user_id']
#     mood = request.json['mood']
#     artist = request.json['artist']
#     genre = request.json['genre']

#     spotifyObject = spotipy.Spotify(session['access_token'])

#     tracks = recommendations(seed_artists=artist, seed_genres=genre, limit=20)
    

#     return "Playlist generated successfully!", 200

# @app.route('/generate_playlist', methods=['POST'])
# def generate_playlist_route():
#     user_input = request.form['user_input']
    
#     # Call playlist generation function
#     playlist = app.spotify_service.generate_playlist(user_input)
    
#     # Redirect to a page displaying the generated playlist (replace with actual route)
#     return redirect(url_for('/display_playlist', playlist=playlist))

# @app.route('/display_playlist/<playlist>')
# def display_playlist(playlist):
#     """Allows interaction between frontend and backend by displaying the generated playlist in html format.

#     Args:
#         playlist (list): playlist generated by my program

#     Returns:
#         _type_: Returns html display of the generated playlist
#     """
#     # Render a page displaying the generated playlist
#     return render_template('playlist.html', playlist=playlist)

if __name__ == '__main__':
    app.run(debug=True)